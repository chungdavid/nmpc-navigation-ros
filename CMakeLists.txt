cmake_minimum_required(VERSION 3.5)
project(nmpc_navigation)

# Default to C99
if(NOT CMAKE_C_STANDARD)
  set(CMAKE_C_STANDARD 99)
endif()

# Default to C++14
if(NOT CMAKE_CXX_STANDARD)
  set(CMAKE_CXX_STANDARD 14)
endif()

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

# find dependencies
find_package(ament_cmake REQUIRED)

foreach(PACKAGE
  eigen3_cmake_module  
  Eigen3
  rclcpp
  geometry_msgs
  nav_msgs
  ackermann_msgs
  visualization_msgs
  OsqpEigen)
  find_package(${PACKAGE} REQUIRED)
endforeach()

include_directories(include)

add_library(nmpc_navigation src/nmpc_navigation.cpp)
target_include_directories(nmpc_navigation PUBLIC ${Eigen3_INCLUDE_DIRS})
target_link_libraries(nmpc_navigation OsqpEigen::OsqpEigen)

add_library(nmpc_navigation_ros src/nmpc_navigation_ros.cpp)
ament_target_dependencies(nmpc_navigation_ros
  rclcpp
  geometry_msgs
  nav_msgs
  ackermann_msgs
  visualization_msgs
)
target_link_libraries(nmpc_navigation_ros
  nmpc_navigation
)

add_executable(nmpc_navigation_node src/nmpc_navigation_node.cpp)

target_link_libraries(nmpc_navigation_node nmpc_navigation_ros)

# Install executables
install(TARGETS nmpc_navigation_node DESTINATION lib/${PROJECT_NAME})

# Install launch files
install(DIRECTORY launch DESTINATION share/${PROJECT_NAME})

# Install config files
install(DIRECTORY config DESTINATION share/${PROJECT_NAME})

if(BUILD_TESTING)
  find_package(ament_lint_auto REQUIRED)
  # the following line skips the linter which checks for copyrights
  # uncomment the line when a copyright and license is not present in all source files
  #set(ament_cmake_copyright_FOUND TRUE)
  # the following line skips cpplint (only works in a git repo)
  # uncomment the line when this package is not in a git repo
  #set(ament_cmake_cpplint_FOUND TRUE)
  ament_lint_auto_find_test_dependencies()
endif()

ament_package()
